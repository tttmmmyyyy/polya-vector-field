module Main;

import Cairo;
import Random;
import Minilib.Math.Complex::{Complex, complex, Complex::@re, Complex::@im, abs, conj, arg};
import Math::{pi64, exp, sin, cos, atan, log, fmod};

import Time;
import Cairo.XlibSurface;

import Debug::{debug_println};

type ComplexF = Complex F64;

// w = z
function_z : ComplexF -> ComplexF;
function_z = |z| z;

// w = z^2
function_z2 : ComplexF -> ComplexF;
function_z2 = |z| z * z;

// w = z^3
function_z3 : ComplexF -> ComplexF;
function_z3 = |z| z * z * z;

// w = 1 / z
function_inv_z : ComplexF -> ComplexF;
function_inv_z = |z| complex(1.0, 0.0) / z;

// w = 1 / z^2
function_inv_z2 : ComplexF -> ComplexF;
function_inv_z2 = |z| complex(1.0, 0.0) / (z * z);

// w = 1 / z^3
function_inv_z3 : ComplexF -> ComplexF;
function_inv_z3 = |z| complex(1.0, 0.0) / (z * z * z);

// w = 1 / (1 - z^2 + z^4), reciprocal of the 12-th cyclotomic polynomial.
function_inv_12_cyclotomic_poly : ComplexF -> ComplexF;
function_inv_12_cyclotomic_poly = |z| (
    let z2 = z * z; // z^2
    let z4 = z2 * z2; // z^4
    complex(1.0, 0.0) / (complex(1.0, 0.0) - z2 + z4)
);

complex_exp : ComplexF -> ComplexF;
complex_exp = |z| complex(exp(z.@re), 0.0) * complex(cos(z.@im), sin(z.@im));

// w = exp(pi z)
function_exp_pi_z : ComplexF -> ComplexF;
function_exp_pi_z = |z| let z = complex(pi64, 0.0) * z; complex_exp(z);

complex_sin : ComplexF -> ComplexF;
complex_sin = |z| (
    let iz = complex(0.0, 1.0) * z;
    let eiz = complex_exp(iz);
    let niz = complex(0.0, -1.0) * z;
    let eniz = complex_exp(niz);
    (eiz - eniz) / complex(0.0, 2.0)
);

complex_cos : ComplexF -> ComplexF;
complex_cos = |z| (
    let iz = complex(0.0, 1.0) * z;
    let eiz = complex_exp(iz);
    let niz = complex(0.0, -1.0) * z;
    let eniz = complex_exp(niz);
    (eiz + eniz) / complex(2.0, 0.0)
);

// w = sin(pi i z)
function_sin_pi_i_z : ComplexF -> ComplexF;
function_sin_pi_i_z = |z| (
    let z = complex(pi64, 0.0) * complex(0.0, 1.0) * z;
    complex_sin(z)
);

// w = 1 / sin(pi i z)
function_inv_sin_pi_i_z : ComplexF -> ComplexF;
function_inv_sin_pi_i_z = |z| (
    complex(1.0, 0.0) / function_sin_pi_i_z(z)
);

// w = log(z); 
function_log : ComplexF -> ComplexF;
function_log = |z| complex(log(z.abs), z.arg);

function_gamma_2z : ComplexF -> ComplexF;
function_gamma_2z = |z| (
    let z = z * complex(2.0, 0.0);
    let gamma = complex(0.5772156649, 0.0);
    let w = z * complex_exp(gamma * z);
    let w = loop((w, 1), |(w, i)|
        if i == 100 { break $ w };
        let z_over_m = z / complex(i.to_F64, 0.0);
        let w = w * (complex(1.0, 0.0) + z_over_m) * complex_exp(-z_over_m);
        continue $ (w, i + 1)
    );
    complex(1.0, 0.0) / w
);

functions : Array (ComplexF -> ComplexF);
functions = [
    function_z,
    // function_z2,
    function_z3,
    function_inv_z,
    // function_inv_z2,
    function_inv_z3,
    function_inv_12_cyclotomic_poly,
    function_exp_pi_z,
    function_sin_pi_i_z,
    function_inv_sin_pi_i_z,
    // function_log, // In current implementation, functions with non-isolated siguarity are not rendered beautifully.
    function_gamma_2z
];

window_size : (I64, I64);
window_size = (450, 800);

window_size_f : (F64, F64);
window_size_f = (window_size.@0.to_F64, window_size.@1.to_F64);

unit_size : F64;
unit_size = window_size_f.@1 / 4.0;

view_rect : (F64, F64, F64, F64);
view_rect = (
    let w = window_size_f.@0 / unit_size;
    let h = window_size_f.@1 / unit_size;
    (-w / 2.0, -h / 2.0, w, h)
);

complex_to_pos : ComplexF -> (F64, F64);
complex_to_pos = |z| (z.@re * unit_size + window_size_f.@0 / 2.0, z.@im * unit_size + window_size_f.@1 / 2.0);

fps : F64;
fps = 30.0;

eps : F64;
eps = 1.0e-6;

tau : F64;
tau = 1.0;

v_max : F64;
v_max = 2.0;

half_life : F64;
half_life = 0.2;

alpha : F64;
alpha = log(2.0) / half_life;

history_len : I64;
history_len = 30;

particles_num : I64;
particles_num = 2000;

particle_radius : F64;
particle_radius = 2.0;

// Returns the raw veclocity and the normalized vector.
// The idea of normalization near poles is from: https://observablehq.com/@vinicius-mello/polya-vector-field
vector_field : (ComplexF -> ComplexF) -> ComplexF -> (F64, ComplexF);
vector_field = |function, z| (
    let w = function(z);
    let v = w.abs;
    if v < eps { (0.0, complex(0.0, 0.0)) };
    let n = w / complex(v, 0.0);
    let nv = normalize_velocity(v);
    let w = complex(nv, 0.0) * n;
    (v, w.conj)
);

normalize_velocity : F64 -> F64;
normalize_velocity = |v| (
    v_max * 2.0 / pi64 * atan(pi64 / 2.0 * tau * v)
);

hsv_to_rgb : (F64, F64, F64) -> (F64, F64, F64);
hsv_to_rgb = |(h, s, v)| (
    let c = v * s;
    let h = h * 6.0;
    let x = c * (1.0 - (h.fmod(2.0) - 1.0).abs);
    let (r, g, b) = if h < 1.0 { (c, x, 0.0) }
                    else if h < 2.0 { (x, c, 0.0) }
                    else if h < 3.0 { (0.0, c, x) }
                    else if h < 4.0 { (0.0, x, c) }
                    else if h < 5.0 { (x, 0.0, c) }
                    else { (c, 0.0, x) };
    (r + (v - c), g + (v - c), b + (v - c))
);

velocity_to_color : F64 -> (F64, F64, F64);
velocity_to_color = |v| (
    let h = 1.0 - v / v_max;
    hsv_to_rgb((h * 0.67, 1.0, 1.0))
);

type History = unbox struct {
    pos : ComplexF,
    velocity : F64,
};

type Particle = unbox struct {
    points : Array History,
    dead_count : I64,
};

namespace Particle {
    reset_random : Random -> Particle -> (Random, Particle);
    reset_random = |rng, particle| (
        let particle = particle.mod_points(truncate(0));
        let particle = particle.set_dead_count(0);

        let (rng, x) = rng.generate_F64;
        let (rng, y) = rng.generate_F64;
        let (min_x, min_y, width, height) = view_rect;
        let x = min_x + x * width;
        let y = min_y + y * height;
        let pos = complex(x, y);
        let particle = particle.add_history(pos, 0.0);

        (rng, particle)
    );

    generate : Random -> (Random, Particle);
    generate = |rng| Particle::empty.reset_random(rng);

    empty : Particle;
    empty = Particle { points : Array::empty(100), dead_count : 0 };

    add_history : ComplexF -> F64 -> Particle -> Particle;
    add_history = |pos, velocity, particle| (
        let history = History { pos : pos, velocity : velocity };
        particle.mod_points(push_back(history))
    );
}

type State = box struct {
    prev_time : F64,
    now_time : F64,
    rng : Random,
    particles : Array Particle,
    function_index : I64,
};

namespace State {
    make : F64 -> State;
    make = |time| (
        let rng = Random::init_by_seed(time.to_U64);
        let (particles, rng) = Iterator::range(0, particles_num).fold(([], rng), |(particles, rng), _|
            let (rng, point) = Particle::generate(rng);
            (particles.push_back(point), rng)
        );
        State {
            prev_time : time,
            now_time : 0.0,
            rng : rng,
            particles : particles,
            function_index : 0,
        }
    );

    generate_F64 : State -> (State, F64);
    generate_F64 = |state| (
        let (rng, x) = state.@rng.generate_F64;
        let state = state.set_rng(rng);
        (state, x)
    );

    update : State -> State;
    update = |state| (
        let delta = 1.0 / fps;
        // For each particle, update the position.
        // Also, re-generate the particle if a random floating number > exp(-alpha * delta).
        loop((0, state), |(i, state)|
            if i == state.@particles.get_size { break $ state };
            let dead_count = state.@particles.@(i).@dead_count;
            let (state, x) = state.generate_F64;
            let kill = x > exp(-alpha * delta);
            let state = if dead_count > 0 { // If the particle is already dead, 
                if dead_count > history_len { // If the particle is dead for history_len frames, re-generate it.
                    let particle = state.@particles.@(i);
                    let state = state.mod_particles(set(i, Particle::empty));
                    let (rng, particle) = particle.reset_random(state.@rng);
                    let state = state.set_rng(rng);
                    state.mod_particles(set(i, particle))
                } else { // If the particle is not dead for history_len frames, increase the dead_count.
                    state.mod_particles(mod(i, mod_dead_count(add(1))))
                }
            } else if dead_count == 0 && kill { // If the particle is not dead and should be killed, set the dead_count to 1.
                state.mod_particles(mod(i, set_dead_count(1)))
            } else { // If the particle is alive,
                let particle = state.@particles.@(i);
                let last = particle.@points.@(particle.@points.get_size - 1);
                let (velocity, w) = vector_field(functions.@(state.@function_index), last.@pos);
                let pos = last.@pos + w * complex(delta, 0.0);
                state.mod_particles(mod(i, add_history(pos, velocity)))
            };
            continue $ (i + 1, state)
        )
    );

    render : Cairo -> State -> IO ();
    render = |cairo, state| (
        // Draw background.
        eval *cairo.set_source_rgb((0.0, 0.0, 0.0));
        eval *cairo.rectangle((0.0, 0.0), window_size_f);
        eval *cairo.fill;

        eval *cairo.set_line_width(1.0);

        // Draw particles.
        eval *loop_m(0, |i|
            if i >= state.@particles.get_size { break_m $ () };
            let particle = state.@particles.@(i);
            let points = particle.@points.get_size;
            eval *loop_m(points - 1, |i|
                if i == 0 { break_m $ () };
                if points - i > history_len { break_m $ () };
                let now = particle.@points.@(i);
                let prev = particle.@points.@(i-1);
                let (r, g, b) = velocity_to_color(normalize_velocity(now.@velocity));
                let a = 1.0 - (points - i).to_F64 / history_len.to_F64;
                let a = a * (history_len - particle.@dead_count).to_F64 / history_len.to_F64;
                eval *cairo.set_source_rgba((r, g, b, a));
                eval *cairo.move_to(complex_to_pos(prev.@pos));
                eval *cairo.line_to(complex_to_pos(now.@pos));
                eval *cairo.stroke;
                continue_m $ i - 1
            );
            continue_m $ i + 1
        );
        
        pure()
    );
}

main : IO ();
main = (
    let window = *XlibSurface::create_simple_window(window_size);
    let event_mask = EventMask::key_press;
    eval *window.select_input(event_mask);

    let surface = XlibSurface::create_back_surface(window);
    let cairo = Cairo::create(surface);

    let time = (*Time::get_now_monotonic).to_F64;
    let state = State::make(time);

    eval *loop_m(state, |state| 
        let (state, is_exit) = *loop_m(state, |state|
            if *window.events_queued(QueuedMode::already) == 0 { break_m $ (state, false) };
            let event = *window.next_event;
            
            // Handle key events.
            if !event.is_key_press { continue_m $ state };
            let keycode = event.as_key_press.@keycode;
            let keysym = *window.keycode_to_keysym(keycode);

            // If `q` is pressed, exit the prgram.
            let keysym_q = string_to_keysym("q");
            if keysym == keysym_q { break_m $ (state, true) };

            // If `n` is pressed, change the function.
            let keysym_n = string_to_keysym("n");
            if keysym == keysym_n {
                let state = state.mod_function_index(add(1) >> |i| i % functions.get_size);
                continue_m $ state
            };

            continue_m $ state
        );
        if is_exit { break_m $ () };

        let now_time = (*Time::get_now_monotonic).to_F64;
        if now_time - state.@prev_time < 1.0 / fps { continue_m $ state };
        let state = state.set_now_time(now_time);
        let state = state.update;
        let state = state.set_prev_time(now_time);
        eval *state.render(cairo);
        eval *window.flush;
        eval *window.swap_buffers(XbeSwapAction::undefined);
        continue_m $ state
    );

    window.destroy_window
);